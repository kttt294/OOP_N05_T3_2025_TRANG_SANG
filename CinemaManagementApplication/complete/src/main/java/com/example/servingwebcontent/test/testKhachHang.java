package com.example.servingwebcontent.test;
import java.util.ArrayList;

public class testKhachHang {
    
    // === UNIT TESTING ===
    
    // Test constructor
    public static void testConstructor() {
        System.out.println("=== TEST CONSTRUCTOR ===");
        
        // Test constructor r·ªóng
        KhachHang kh1 = new KhachHang();
        assert kh1.getCCCD() == null : "Constructor r·ªóng kh√¥ng ƒë√∫ng";
        assert kh1.getTen() == null : "Constructor r·ªóng kh√¥ng ƒë√∫ng";
        System.out.println("‚úì Constructor r·ªóng OK");
        
        // Test constructor v·ªõi tham s·ªë
        KhachHang kh2 = new KhachHang("123", "Nguyen Van A", 25, "0123456789", "a@email.com");
        assert "123".equals(kh2.getCCCD()) : "CCCD kh√¥ng ƒë√∫ng";
        assert "Nguyen Van A".equals(kh2.getTen()) : "T√™n kh√¥ng ƒë√∫ng";
        assert kh2.getTuoi() == 25 : "Tu·ªïi kh√¥ng ƒë√∫ng";
        System.out.println("‚úì Constructor v·ªõi tham s·ªë OK");
        
        // Test constructor v·ªõi gi·ªõi t√≠nh
        KhachHang kh3 = new KhachHang("456", "Tran Thi B", 30, "0987654321", "b@email.com", "Nu");
        assert "Nu".equals(kh3.getGioiTinh()) : "Gi·ªõi t√≠nh kh√¥ng ƒë√∫ng";
        System.out.println("‚úì Constructor v·ªõi gi·ªõi t√≠nh OK");
    }
    
    // Test getters v√† setters
    public static void testGettersSetters() {
        System.out.println("\n=== TEST GETTERS & SETTERS ===");
        
        KhachHang kh = new KhachHang();
        
        // Test setCCCD
        kh.setCCCD("789");
        assert "789".equals(kh.getCCCD()) : "setCCCD/getCCCD kh√¥ng ƒë√∫ng";
        
        // Test setTen
        kh.setTen("Le Van C");
        assert "Le Van C".equals(kh.getTen()) : "setTen/getTen kh√¥ng ƒë√∫ng";
        
        // Test setTuoi
        kh.setTuoi(35);
        assert kh.getTuoi() == 35 : "setTuoi/getTuoi kh√¥ng ƒë√∫ng";
        
        // Test setSdt
        kh.setSdt("0123456789");
        assert "0123456789".equals(kh.getSdt()) : "setSdt/getSdt kh√¥ng ƒë√∫ng";
        
        // Test setEmail
        kh.setEmail("c@email.com");
        assert "c@email.com".equals(kh.getEmail()) : "setEmail/getEmail kh√¥ng ƒë√∫ng";
        
        // Test setGioiTinh
        kh.setGioiTinh("Nam");
        assert "Nam".equals(kh.getGioiTinh()) : "setGioiTinh/getGioiTinh kh√¥ng ƒë√∫ng";
        
        System.out.println("‚úì T·∫•t c·∫£ getters/setters OK");
    }
    
    // Test method themVe
    public static void testThemVe() {
        System.out.println("\n=== TEST THEM VE ===");
        
        KhachHang kh = new KhachHang("123", "Test", 25, "0123456789", "test@email.com");
        
        // Test th√™m v√© ƒë·∫ßu ti√™n
        Ve ve1 = new Ve("VE001", "123", "SC001", "GHE001", 50000);
        kh.themVe(ve1);
        assert kh.getLichSuDatVe().size() == 1 : "Th√™m v√© ƒë·∫ßu ti√™n kh√¥ng ƒë√∫ng";
        
        // Test th√™m v√© th·ª© hai
        Ve ve2 = new Ve("VE002", "123", "SC002", "GHE002", 60000);
        kh.themVe(ve2);
        assert kh.getLichSuDatVe().size() == 2 : "Th√™m v√© th·ª© hai kh√¥ng ƒë√∫ng";
        
        System.out.println("‚úì Th√™m v√© OK");
    }
    
    // === INTEGRATION TESTING ===
    
    // Test lu·ªìng CRUD ho√†n ch·ªânh
    public static void testCRUDIntegration() {
        System.out.println("\n=== TEST CRUD INTEGRATION ===");
        
        // Create
        KhachHang kh = new KhachHang("INT001", "Integration Test", 25, "0123456789", "int@email.com");
        KhachHang.Create(kh);
        
        // Read
        KhachHang khRead = KhachHang.getKhachHangByCCCD("INT001");
        assert khRead != null : "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng sau khi t·∫°o";
        assert "Integration Test".equals(khRead.getTen()) : "D·ªØ li·ªáu ƒë·ªçc kh√¥ng ƒë√∫ng";
        
        // Update
        kh.setTen("Updated Integration Test");
        KhachHang.Update("INT001", kh);
        KhachHang khUpdated = KhachHang.getKhachHangByCCCD("INT001");
        assert "Updated Integration Test".equals(khUpdated.getTen()) : "Update kh√¥ng th√†nh c√¥ng";
        
        // Delete
        KhachHang.Delete("INT001");
        KhachHang khDeleted = KhachHang.getKhachHangByCCCD("INT001");
        assert khDeleted == null : "Delete kh√¥ng th√†nh c√¥ng";
        
        System.out.println("‚úì CRUD Integration OK");
    }
    
    // === EDGE CASE TESTING ===
    
    // Test v·ªõi d·ªØ li·ªáu null
    public static void testNullData() {
        System.out.println("\n=== TEST NULL DATA ===");
        
        // Test t·∫°o kh√°ch h√†ng v·ªõi CCCD null
        try {
            KhachHang kh = new KhachHang(null, "Test", 25, "0123456789", "test@email.com");
            KhachHang.Create(kh);
            System.out.println("‚úó Kh√¥ng b·∫Øt ƒë∆∞·ª£c l·ªói CCCD null");
        } catch (Exception e) {
            System.out.println("‚úì B·∫Øt ƒë∆∞·ª£c l·ªói CCCD null: " + e.getMessage());
        }
        
        // Test t·∫°o kh√°ch h√†ng v·ªõi t√™n null
        try {
            KhachHang kh = new KhachHang("123", null, 25, "0123456789", "test@email.com");
            KhachHang.Create(kh);
            System.out.println("‚úó Kh√¥ng b·∫Øt ƒë∆∞·ª£c l·ªói t√™n null");
        } catch (Exception e) {
            System.out.println("‚úì B·∫Øt ƒë∆∞·ª£c l·ªói t√™n null: " + e.getMessage());
        }
        
        // Test t·∫°o kh√°ch h√†ng v·ªõi CCCD r·ªóng
        try {
            KhachHang kh = new KhachHang("", "Test", 25, "0123456789", "test@email.com");
            KhachHang.Create(kh);
            System.out.println("‚úó Kh√¥ng b·∫Øt ƒë∆∞·ª£c l·ªói CCCD r·ªóng");
        } catch (Exception e) {
            System.out.println("‚úì B·∫Øt ƒë∆∞·ª£c l·ªói CCCD r·ªóng: " + e.getMessage());
        }
    }
    
    // Test v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
    public static void testInvalidData() {
        System.out.println("\n=== TEST INVALID DATA ===");
        
        // Test tu·ªïi √¢m
        try {
            KhachHang kh = new KhachHang("123", "Test", -5, "0123456789", "test@email.com");
            System.out.println("‚úó Kh√¥ng b·∫Øt ƒë∆∞·ª£c l·ªói tu·ªïi √¢m");
        } catch (Exception e) {
            System.out.println("‚úì B·∫Øt ƒë∆∞·ª£c l·ªói tu·ªïi √¢m: " + e.getMessage());
        }
        
        // Test tu·ªïi qu√° l·ªõn
        try {
            KhachHang kh = new KhachHang("123", "Test", 200, "0123456789", "test@email.com");
            System.out.println("‚úó Kh√¥ng b·∫Øt ƒë∆∞·ª£c l·ªói tu·ªïi qu√° l·ªõn");
        } catch (Exception e) {
            System.out.println("‚úì B·∫Øt ƒë∆∞·ª£c l·ªói tu·ªïi qu√° l·ªõn: " + e.getMessage());
        }
        
        // Test CCCD tr√πng l·∫∑p
        KhachHang kh1 = new KhachHang("DUP001", "Test 1", 25, "0123456789", "test1@email.com");
        KhachHang.Create(kh1);
        
        try {
            KhachHang kh2 = new KhachHang("DUP001", "Test 2", 30, "0987654321", "test2@email.com");
            KhachHang.Create(kh2);
            System.out.println("‚úó Kh√¥ng b·∫Øt ƒë∆∞·ª£c l·ªói CCCD tr√πng l·∫∑p");
        } catch (Exception e) {
            System.out.println("‚úì B·∫Øt ƒë∆∞·ª£c l·ªói CCCD tr√πng l·∫∑p: " + e.getMessage());
        }
    }
    
    // === MOCK TESTING ===
    
    // Test v·ªõi d·ªØ li·ªáu gi·∫£
    public static void testMockData() {
        System.out.println("\n=== TEST MOCK DATA ===");
        
        // T·∫°o d·ªØ li·ªáu gi·∫£
        ArrayList<KhachHang> mockData = new ArrayList<>();
        mockData.add(new KhachHang("MOCK001", "Mock User 1", 25, "0123456789", "mock1@email.com", "Nam"));
        mockData.add(new KhachHang("MOCK002", "Mock User 2", 30, "0987654321", "mock2@email.com", "Nu"));
        mockData.add(new KhachHang("MOCK003", "Mock User 3", 35, "0123456780", "mock3@email.com", "Nam"));
        
        // Test t√¨m ki·∫øm theo t√™n
        ArrayList<KhachHang> result1 = new ArrayList<>();
        for (KhachHang kh : mockData) {
            if (kh.getTen().contains("Mock")) {
                result1.add(kh);
            }
        }
        assert result1.size() == 3 : "T√¨m ki·∫øm theo t√™n kh√¥ng ƒë√∫ng";
        
        // Test t√¨m ki·∫øm theo gi·ªõi t√≠nh
        ArrayList<KhachHang> result2 = new ArrayList<>();
        for (KhachHang kh : mockData) {
            if ("Nam".equals(kh.getGioiTinh())) {
                result2.add(kh);
            }
        }
        assert result2.size() == 2 : "T√¨m ki·∫øm theo gi·ªõi t√≠nh kh√¥ng ƒë√∫ng";
        
        // Test t√≠nh t·ªïng ti·ªÅn
        double totalMoney = 0.0;
        for (KhachHang kh : mockData) {
            // Gi·∫£ s·ª≠ m·ªói kh√°ch h√†ng c√≥ 1 v√© 50000
            totalMoney += 50000;
        }
        assert totalMoney == 150000.0 : "T√≠nh t·ªïng ti·ªÅn kh√¥ng ƒë√∫ng";
        
        System.out.println("‚úì Mock data testing OK");
    }
    
    // === PERFORMANCE TESTING ===
    
    // Test hi·ªáu su·∫•t v·ªõi d·ªØ li·ªáu l·ªõn
    public static void testPerformance() {
        System.out.println("\n=== TEST PERFORMANCE ===");
        
        long startTime = System.currentTimeMillis();
        
        // T·∫°o 1000 kh√°ch h√†ng
        for (int i = 0; i < 1000; i++) {
            KhachHang kh = new KhachHang("PERF" + i, "Performance User " + i, 25, "0123456789", "perf" + i + "@email.com");
            KhachHang.Create(kh);
        }
        
        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        
        System.out.println("‚úì T·∫°o 1000 kh√°ch h√†ng trong " + duration + "ms");
        
        // Test t√¨m ki·∫øm
        startTime = System.currentTimeMillis();
        KhachHang result = KhachHang.getKhachHangByCCCD("PERF500");
        endTime = System.currentTimeMillis();
        duration = endTime - startTime;
        
        System.out.println("‚úì T√¨m ki·∫øm kh√°ch h√†ng trong " + duration + "ms");
    }
    
    // === MAIN TEST METHOD ===
    
    public static void test() {
        System.out.println("üöÄ B·∫ÆT ƒê·∫¶U TEST KHACH HANG MODEL");
        System.out.println("=====================================");
        
        try {
            testConstructor();
            testGettersSetters();
            testThemVe();
            testCRUDIntegration();
            testNullData();
            testInvalidData();
            testMockData();
            testPerformance();
            
            System.out.println("\n=====================================");
            System.out.println("‚úÖ T·∫§T C·∫¢ TEST KHACH HANG TH√ÄNH C√îNG!");
            
        } catch (Exception e) {
            System.out.println("\n=====================================");
            System.out.println("‚ùå TEST KHACH HANG TH·∫§T B·∫†I: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

