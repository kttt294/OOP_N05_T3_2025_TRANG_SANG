import java.time.LocalDateTime;
import java.util.ArrayList;

public class testDateTimeUtilsExample {
    
    // ===== V√ç D·ª§ S·ª¨ D·ª§NG DATETIMEUTILS =====
    
    public void testSuatChieuWithDateTimeUtils() {
        System.out.println("=== V√ç D·ª§ S·ª¨ D·ª§NG DATETIMEUTILS ===");
        
        // ‚úÖ C√ÅCH ƒê√öNG: S·ª≠ d·ª•ng DateTimeUtils
        LocalDateTime startTime = DateTimeUtils.parseVietDateTime("20:00 25/12/2024");
        LocalDateTime endTime = DateTimeUtils.parseVietDateTime("22:30 25/12/2024");
        
        SuatChieu suatChieu = new SuatChieu("SC001", "P001", "F001", startTime, endTime);
        boolean result = SuatChieuController.taoSuatChieu(suatChieu);
        assert result : "T·∫°o su·∫•t chi·∫øu th√†nh c√¥ng v·ªõi DateTimeUtils";
        
        // Hi·ªÉn th·ªã th·ªùi gian theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
        String startTimeFormatted = DateTimeUtils.formatVietDateTime(startTime);
        String endTimeFormatted = DateTimeUtils.formatVietDateTime(endTime);
        System.out.println("Th·ªùi gian b·∫Øt ƒë·∫ßu: " + startTimeFormatted);
        System.out.println("Th·ªùi gian k·∫øt th√∫c: " + endTimeFormatted);
        
        // D·ªçn d·∫πp
        SuatChieuController.xoaSuatChieu("SC001");
        
        System.out.println("‚úÖ Test DateTimeUtils PASSED");
    }
    
    public void testValidationWithDateTimeUtils() {
        System.out.println("=== TEST VALIDATION V·ªöI DATETIMEUTILS ===");
        
        // Test th·ªùi gian kh√¥ng h·ª£p l·ªá
        LocalDateTime invalidTime = DateTimeUtils.parseVietDateTime("25:00 32/13/2024");
        assert invalidTime == null : "Th·ªùi gian kh√¥ng h·ª£p l·ªá ph·∫£i tr·∫£ v·ªÅ null";
        
        // Test th·ªùi gian h·ª£p l·ªá
        LocalDateTime validTime = DateTimeUtils.parseVietDateTime("20:30 15/12/2024");
        assert validTime != null : "Th·ªùi gian h·ª£p l·ªá ph·∫£i kh√¥ng null";
        
        // Test format th·ªùi gian
        String formatted = DateTimeUtils.formatVietDateTime(validTime);
        assert "20:30 15/12/2024".equals(formatted) : "Format th·ªùi gian ƒë√∫ng";
        
        System.out.println("‚úÖ Test Validation DateTimeUtils PASSED");
    }
    
    public void testEdgeCasesWithDateTimeUtils() {
        System.out.println("=== TEST EDGE CASES V·ªöI DATETIMEUTILS ===");
        
        // Test null input
        LocalDateTime nullResult = DateTimeUtils.parseVietDateTime(null);
        assert nullResult == null : "Null input ph·∫£i tr·∫£ v·ªÅ null";
        
        // Test empty string
        LocalDateTime emptyResult = DateTimeUtils.parseVietDateTime("");
        assert emptyResult == null : "Empty string ph·∫£i tr·∫£ v·ªÅ null";
        
        // Test sai format
        LocalDateTime wrongFormat = DateTimeUtils.parseVietDateTime("2024-12-25 20:00");
        assert wrongFormat == null : "Sai format ph·∫£i tr·∫£ v·ªÅ null";
        
        // Test ƒë√∫ng format
        LocalDateTime correctFormat = DateTimeUtils.parseVietDateTime("20:00 25/12/2024");
        assert correctFormat != null : "ƒê√∫ng format ph·∫£i kh√¥ng null";
        
        System.out.println("‚úÖ Test Edge Cases DateTimeUtils PASSED");
    }
    
    public void testBusinessLogicWithDateTimeUtils() {
        System.out.println("=== TEST BUSINESS LOGIC V·ªöI DATETIMEUTILS ===");
        
        // Test th·ªùi gian b·∫Øt ƒë·∫ßu > th·ªùi gian k·∫øt th√∫c
        LocalDateTime startTime = DateTimeUtils.parseVietDateTime("22:00 25/12/2024");
        LocalDateTime endTime = DateTimeUtils.parseVietDateTime("20:00 25/12/2024");
        
        SuatChieu invalidSuatChieu = new SuatChieu("SC002", "P001", "F001", startTime, endTime);
        boolean result = SuatChieuController.taoSuatChieu(invalidSuatChieu);
        assert !result : "Kh√¥ng th·ªÉ t·∫°o su·∫•t chi·∫øu v·ªõi th·ªùi gian b·∫Øt ƒë·∫ßu > k·∫øt th√∫c";
        
        // Test th·ªùi gian h·ª£p l·ªá
        LocalDateTime validStart = DateTimeUtils.parseVietDateTime("20:00 25/12/2024");
        LocalDateTime validEnd = DateTimeUtils.parseVietDateTime("22:30 25/12/2024");
        
        SuatChieu validSuatChieu = new SuatChieu("SC003", "P001", "F001", validStart, validEnd);
        boolean validResult = SuatChieuController.taoSuatChieu(validSuatChieu);
        assert validResult : "T·∫°o su·∫•t chi·∫øu v·ªõi th·ªùi gian h·ª£p l·ªá th√†nh c√¥ng";
        
        // D·ªçn d·∫πp
        SuatChieuController.xoaSuatChieu("SC003");
        
        System.out.println("‚úÖ Test Business Logic DateTimeUtils PASSED");
    }
    
    public void testPerformanceWithDateTimeUtils() {
        System.out.println("=== TEST PERFORMANCE V·ªöI DATETIMEUTILS ===");
        
        long startTime = System.currentTimeMillis();
        
        // T·∫°o 100 su·∫•t chi·∫øu v·ªõi DateTimeUtils
        for (int i = 1; i <= 100; i++) {
            LocalDateTime start = DateTimeUtils.parseVietDateTime("20:00 25/12/2024");
            LocalDateTime end = DateTimeUtils.parseVietDateTime("22:30 25/12/2024");
            
            SuatChieu suatChieu = new SuatChieu("PERF" + i, "P001", "F001", start, end);
            SuatChieuController.taoSuatChieu(suatChieu);
        }
        
        long createTime = System.currentTimeMillis() - startTime;
        System.out.println("Th·ªùi gian t·∫°o 100 su·∫•t chi·∫øu v·ªõi DateTimeUtils: " + createTime + "ms");
        
        // D·ªçn d·∫πp
        for (int i = 1; i <= 100; i++) {
            SuatChieuController.xoaSuatChieu("PERF" + i);
        }
        
        assert createTime < 5000 : "T·∫°o su·∫•t chi·∫øu v·ªõi DateTimeUtils qu√° ch·∫≠m";
        
        System.out.println("‚úÖ Test Performance DateTimeUtils PASSED");
    }
    
    // ===== SO S√ÅNH C√ÅCH S·ª¨ D·ª§NG =====
    
    public void compareDateTimeUsage() {
        System.out.println("=== SO S√ÅNH C√ÅCH S·ª¨ D·ª§NG DATETIME ===");
        
        // ‚ùå C√ÅCH C≈®: S·ª≠ d·ª•ng LocalDateTime.of() (kh√≥ ƒë·ªçc)
        LocalDateTime oldWay = LocalDateTime.of(2024, 12, 25, 20, 0);
        System.out.println("C√°ch c≈©: LocalDateTime.of(2024, 12, 25, 20, 0)");
        System.out.println("K·∫øt qu·∫£: " + oldWay);
        
        // ‚úÖ C√ÅCH M·ªöI: S·ª≠ d·ª•ng DateTimeUtils (d·ªÖ ƒë·ªçc, th√¢n thi·ªán ng∆∞·ªùi d√πng)
        LocalDateTime newWay = DateTimeUtils.parseVietDateTime("20:00 25/12/2024");
        System.out.println("C√°ch m·ªõi: DateTimeUtils.parseVietDateTime(\"20:00 25/12/2024\")");
        System.out.println("K·∫øt qu·∫£: " + newWay);
        
        // Format theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
        String vietFormat = DateTimeUtils.formatVietDateTime(newWay);
        System.out.println("Format Vi·ªát Nam: " + vietFormat);
        
        assert oldWay.equals(newWay) : "Hai c√°ch ph·∫£i cho k·∫øt qu·∫£ gi·ªëng nhau";
        
        System.out.println("‚úÖ So s√°nh DateTime usage PASSED");
    }
    
    // ===== MAIN TEST METHOD =====
    
    public void test() {
        System.out.println("üïê B·∫ÆT ƒê·∫¶U TEST DATETIMEUTILS üïê");
        
        try {
            testSuatChieuWithDateTimeUtils();
            testValidationWithDateTimeUtils();
            testEdgeCasesWithDateTimeUtils();
            testBusinessLogicWithDateTimeUtils();
            testPerformanceWithDateTimeUtils();
            compareDateTimeUsage();
            
            System.out.println("üéâ T·∫§T C·∫¢ TEST DATETIMEUTILS PASSED! üéâ");
            
        } catch (Exception e) {
            System.err.println("‚ùå TEST DATETIMEUTILS FAILED: " + e.getMessage());
            e.printStackTrace();
        }
    }
} 